import os
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv
from database import add_note, get_notes, delete_note

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üìù –ë–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_note - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "/notes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "/delete_note - —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É!"
    )

@dp.message(Command("add_note"))
async def cmd_add_note(message: types.Message):
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é!")

@dp.message(Command("notes"))
async def cmd_notes(message: types.Message):
    notes = get_notes(message.from_user.id)
    if not notes:
        await message.answer("–ó–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
        return
    
    response = "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    for note_id, note_text in notes:
        response += f"{note_id}. {note_text}\n"
    await message.answer(response)

@dp.message(Command("delete_note"))
async def cmd_delete_note(message: types.Message):
    notes = get_notes(message.from_user.id)
    if not notes:
        await message.answer("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    builder = InlineKeyboardBuilder()
    for note_id, note_text in notes:
        builder.button(
            text=f"‚ùå {note_id}. {note_text[:20]}...",
            callback_data=f"delete_{note_id}"
        )
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

# ========= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =========

@dp.message(F.text & ~F.command)
async def handle_text_message(message: types.Message):
    try:
        add_note(message.from_user.id, message.text)
        await message.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")

# ========= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è =========

@dp.callback_query(F.data.startswith("delete_"))
async def delete_note_callback(callback: types.CallbackQuery):
    note_id = int(callback.data.split("_")[1])
    delete_note(note_id)
    await callback.message.answer("üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()

# ========= –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =========

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# ========= –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ =========

async def check_bot_running():
    try:
        session = AiohttpSession()
        await session.close()
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return True

# ========= –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =========

if __name__ == '__main__':
    try:
        if asyncio.run(check_bot_running()):
            logger.error("–û—à–∏–±–∫–∞: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
            sys.exit(1)
        
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
